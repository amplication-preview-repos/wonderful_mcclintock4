/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Analytics } from "./Analytics";
import { AnalyticsCountArgs } from "./AnalyticsCountArgs";
import { AnalyticsFindManyArgs } from "./AnalyticsFindManyArgs";
import { AnalyticsFindUniqueArgs } from "./AnalyticsFindUniqueArgs";
import { CreateAnalyticsArgs } from "./CreateAnalyticsArgs";
import { UpdateAnalyticsArgs } from "./UpdateAnalyticsArgs";
import { DeleteAnalyticsArgs } from "./DeleteAnalyticsArgs";
import { User } from "../../user/base/User";
import { AnalyticsService } from "../analytics.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Analytics)
export class AnalyticsResolverBase {
  constructor(
    protected readonly service: AnalyticsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Analytics",
    action: "read",
    possession: "any",
  })
  async _analyticsItemsMeta(
    @graphql.Args() args: AnalyticsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Analytics])
  @nestAccessControl.UseRoles({
    resource: "Analytics",
    action: "read",
    possession: "any",
  })
  async analyticsItems(
    @graphql.Args() args: AnalyticsFindManyArgs
  ): Promise<Analytics[]> {
    return this.service.analyticsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Analytics, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Analytics",
    action: "read",
    possession: "own",
  })
  async analytics(
    @graphql.Args() args: AnalyticsFindUniqueArgs
  ): Promise<Analytics | null> {
    const result = await this.service.analytics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Analytics)
  @nestAccessControl.UseRoles({
    resource: "Analytics",
    action: "create",
    possession: "any",
  })
  async createAnalytics(
    @graphql.Args() args: CreateAnalyticsArgs
  ): Promise<Analytics> {
    return await this.service.createAnalytics({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Analytics)
  @nestAccessControl.UseRoles({
    resource: "Analytics",
    action: "update",
    possession: "any",
  })
  async updateAnalytics(
    @graphql.Args() args: UpdateAnalyticsArgs
  ): Promise<Analytics | null> {
    try {
      return await this.service.updateAnalytics({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Analytics)
  @nestAccessControl.UseRoles({
    resource: "Analytics",
    action: "delete",
    possession: "any",
  })
  async deleteAnalytics(
    @graphql.Args() args: DeleteAnalyticsArgs
  ): Promise<Analytics | null> {
    try {
      return await this.service.deleteAnalytics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Analytics): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
