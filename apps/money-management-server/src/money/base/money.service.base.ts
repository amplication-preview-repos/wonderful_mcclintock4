/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Money as PrismaMoney,
  User as PrismaUser,
} from "@prisma/client";

export class MoneyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MoneyCountArgs, "select">): Promise<number> {
    return this.prisma.money.count(args);
  }

  async monies(args: Prisma.MoneyFindManyArgs): Promise<PrismaMoney[]> {
    return this.prisma.money.findMany(args);
  }
  async money(args: Prisma.MoneyFindUniqueArgs): Promise<PrismaMoney | null> {
    return this.prisma.money.findUnique(args);
  }
  async createMoney(args: Prisma.MoneyCreateArgs): Promise<PrismaMoney> {
    return this.prisma.money.create(args);
  }
  async updateMoney(args: Prisma.MoneyUpdateArgs): Promise<PrismaMoney> {
    return this.prisma.money.update(args);
  }
  async deleteMoney(args: Prisma.MoneyDeleteArgs): Promise<PrismaMoney> {
    return this.prisma.money.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.money
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
