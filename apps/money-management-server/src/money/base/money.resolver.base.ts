/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Money } from "./Money";
import { MoneyCountArgs } from "./MoneyCountArgs";
import { MoneyFindManyArgs } from "./MoneyFindManyArgs";
import { MoneyFindUniqueArgs } from "./MoneyFindUniqueArgs";
import { CreateMoneyArgs } from "./CreateMoneyArgs";
import { UpdateMoneyArgs } from "./UpdateMoneyArgs";
import { DeleteMoneyArgs } from "./DeleteMoneyArgs";
import { User } from "../../user/base/User";
import { MoneyService } from "../money.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Money)
export class MoneyResolverBase {
  constructor(
    protected readonly service: MoneyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Money",
    action: "read",
    possession: "any",
  })
  async _moniesMeta(
    @graphql.Args() args: MoneyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Money])
  @nestAccessControl.UseRoles({
    resource: "Money",
    action: "read",
    possession: "any",
  })
  async monies(@graphql.Args() args: MoneyFindManyArgs): Promise<Money[]> {
    return this.service.monies(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Money, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Money",
    action: "read",
    possession: "own",
  })
  async money(
    @graphql.Args() args: MoneyFindUniqueArgs
  ): Promise<Money | null> {
    const result = await this.service.money(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Money)
  @nestAccessControl.UseRoles({
    resource: "Money",
    action: "create",
    possession: "any",
  })
  async createMoney(@graphql.Args() args: CreateMoneyArgs): Promise<Money> {
    return await this.service.createMoney({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Money)
  @nestAccessControl.UseRoles({
    resource: "Money",
    action: "update",
    possession: "any",
  })
  async updateMoney(
    @graphql.Args() args: UpdateMoneyArgs
  ): Promise<Money | null> {
    try {
      return await this.service.updateMoney({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Money)
  @nestAccessControl.UseRoles({
    resource: "Money",
    action: "delete",
    possession: "any",
  })
  async deleteMoney(
    @graphql.Args() args: DeleteMoneyArgs
  ): Promise<Money | null> {
    try {
      return await this.service.deleteMoney(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Money): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
